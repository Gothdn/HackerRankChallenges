'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'solve' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY w
 */

function solve(a, w) {
    //  Create a dictionary and replace a value with its dictionary position
    let t = [...a].sort(function(a, b) { return a - b; });
    let d = [], x = 0;
    while (x < t.length) {
        while (x < t.length && t[x] == t[x + 1]) {
            x++;
        }
        d.push(t[x]);
        x++;
    }
    let qSearchD = function (value) {
        let l = 0, r = d.length - 1;
        while (l <= r) {
            let m = Math.floor((l + r) / 2);
            if (d[m] < value) { l = m + 1 }
            else if (value < d[m]) { r = m -1; }
            else return m;
        }
    }
    a = a.map(v => qSearchD(v) + 1);
    
    //  BIT
    let n = d.length + 100;
    let bit = new Array(n).fill(0);
    let update = function(x, value) {
        for (;x <= n; x += x & -x) {
            bit[x] = Math.max(bit[x], value)
        }
    }

    let query = function(x) {
        let max = 0;
        for (; x > 0; x -= x & -x) {
            max = Math.max(max, bit[x]);
        }
        return max
    }
    
    for (let i = 0; i < a.length; i++) {
        update(a[i], query(a[i] - 1) + w[i]);
    }
    let max = 0;
    bit.forEach(b => max = Math.max(b, max));
    return max;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const t = parseInt(readLine().trim(), 10);

    for (let tItr = 0; tItr < t; tItr++) {
        const n = parseInt(readLine().trim(), 10);

        const a = readLine().replace(/\s+$/g, '').split(' ').map(aTemp => parseInt(aTemp, 10));

        const w = readLine().replace(/\s+$/g, '').split(' ').map(wTemp => parseInt(wTemp, 10));

        const result = solve(a, w);

        ws.write(result + '\n');
    }

    ws.end();
}
